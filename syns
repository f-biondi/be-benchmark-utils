#!/usr/bin/python3
from sys import argv
import math
import os

class Graph:
    def __init__(self, nodes, edges):
        self.nodes = nodes
        self.edges = edges
        self.f = open("graph.txt", "w")
        self.f.write(f"{nodes}\n")
        self.f.write(f"{edges}\n")

    def add_directed_edge(self, start, end):
        self.f.write(f"{start} {end}\n")

    def add_undirected_edge(self, start, end):
        self.add_directed_edge(start, end)
        self.add_directed_edge(end, start)

    def save(self):
        self.f.close()

class SyntheticGraph(Graph):
    def __init__(self, nodes, stable_chain_size, unstable_chain_size, degree):
        super().__init__(nodes, nodes*3*degree)
        self.stable_chain_size = stable_chain_size
        self.unstable_chain_size = unstable_chain_size
        self.degree = degree
        print("Unstable chain")
        unstable_chain = self.chain_intraconnected(0, unstable_chain_size, degree)
        print("Stable chain")
        stable_chain = self.chain_intraconnected(unstable_chain_size * 4, stable_chain_size, degree)

        with open("partition.txt", "w") as f:
            for i in range(unstable_chain_size * 4):
                f.write(f"{i if i < 4 else 0}\n")
            for _ in range(stable_chain_size * 4):
                f.write(f"{unstable_chain_size * 4}\n")

    def chain_intraconnected(self, start, size, degree):
        for i in range(0, size*4,4):
            for k in range(degree):
                dest_chain_start = ((i + (k*4)) % (size*4)) + start
                self.add_undirected_edge(((i-3) % (size*4)) + start, dest_chain_start)
                self.add_undirected_edge(((i-1) % (size*4)) + start, dest_chain_start+2)
                self.add_undirected_edge((i) + start, dest_chain_start+1)
                self.add_undirected_edge((i) + start, dest_chain_start+2)
                self.add_undirected_edge((i+1) + start, dest_chain_start+3)
                self.add_undirected_edge((i+2) + start, dest_chain_start+3)

if __name__ == "__main__":
    nodes = int(argv[1])
    assert not nodes % 4 and nodes > 0
    ring_n = int(nodes / 4)
    reducibility = float(argv[2])
    assert reducibility >=0 and reducibility <= 1.0
    ring_stable_n = int(ring_n * reducibility)
    ring_unstable_n = int(ring_n - ring_stable_n)
    n_chain = int(argv[3])
    graph = SyntheticGraph(nodes, ring_stable_n, ring_unstable_n, n_chain)
    graph.save()
